import { body } from 'express-validator';
import { usersErrorsValidator } from '../errors'

export const loginUserValidation = body('login')
    .notEmpty()
    .withMessage(usersErrorsValidator.loginError.message)
    .isString()
    .withMessage(usersErrorsValidator.loginError.message)
    .trim()
    .isLength({ min: 3, max: 10 })
    .withMessage(usersErrorsValidator.loginError.message)
    .matches(/^[a-zA-Z0-9_-]*$/)
    .withMessage(usersErrorsValidator.loginError.message)

export const loginOrEmailUserValidation = body('loginOrEmail')
    .notEmpty()
    .withMessage(usersErrorsValidator.loginError.message)
    .isString()
    .withMessage(usersErrorsValidator.loginError.message)
    .trim()
    .isLength({ min: 3, max: 10 })
    .withMessage(usersErrorsValidator.loginError.message)
    .matches(/^[a-zA-Z0-9_-]*$/)
    .withMessage(usersErrorsValidator.loginError.message)    

export const passwordUserValidation = body('password')
    .notEmpty()
    .withMessage(usersErrorsValidator.passwordError.message)
    .isString()
    .withMessage(usersErrorsValidator.passwordError.message)
    .trim()
    .isLength({ min: 6, max: 20 })
    .withMessage(usersErrorsValidator.passwordError.message)

export const newPasswordUserValidation = body('newPassword')
    .notEmpty()
    .withMessage(usersErrorsValidator.newPassword.message)
    .isString()
    .withMessage(usersErrorsValidator.newPassword.message)
    .trim()
    .isLength({ min: 6, max: 20 })
    .withMessage(usersErrorsValidator.newPassword.message)    

export const emailUserValidation = body('email')
    .notEmpty()
    .withMessage(usersErrorsValidator.emailError.message)
    .isString()
    .withMessage(usersErrorsValidator.emailError.message)
    .trim()
    .withMessage(usersErrorsValidator.emailError.message)
    .isEmail()
    .withMessage(usersErrorsValidator.emailError.message)

export const codeUserValidation = body('code')
    .notEmpty()
    .withMessage(usersErrorsValidator.emailError.message)
    .isString()
    .withMessage(usersErrorsValidator.emailError.message)
    .trim()
    .withMessage(usersErrorsValidator.emailError.message)
    .isUUID()
    .withMessage(usersErrorsValidator.emailError.message)   
